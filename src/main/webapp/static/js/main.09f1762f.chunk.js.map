{"version":3,"sources":["App.js","serviceWorker.js","pages/Massage.js","const.js","pages/customer.js","pages/saler.js","pages/UserList.js","pages/admin.js","router.js","index.js"],"names":["App","className","role","href","Component","Boolean","window","location","hostname","match","Option","Select","Massage","props","state","myself","msg","user","targetId","textToSent","sent","onSelectChange","bind","onTextChange","onSendClick","console","log","this","getUserBy","fetch","then","response","json","myJson","setState","toRole","toUser","filtedUser","map","item","push","value","e","target","from","data","msgbody","name","text","customer","salesman","body","JSON","stringify","cache","credentials","headers","method","mode","redirect","referrer","setTimeout","key","id","style","width","onChange","index","placeholder","type","onClick","message","Customer","saler","UserList","updateData","columns","title","dataIndex","render","rowSelection","dataSource","Admin","Router","exact","path","component","withRouter","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.09f1762f.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport { Link } from 'react-router-dom'\nimport './App.css';\n\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <h1>buyCar</h1>\n                <h2>Select your role</h2>\n                <h3>if you didn't login it will jump to login after your choice then back this page</h3>\n                <ul role=\"nav\">\n                    <li><a href=\"/customer\">customer</a></li>\n                    <li><a href=\"/saler\">salerman</a></li>\n                    <li><a href=\"/admin\">admin</a></li>\n                </ul>\n                <h2><a href=\"/logout\">logout</a></h2>\n                <h2>Or create new account</h2>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {Component} from 'react';\r\nimport {api_host} from '../const';\r\nimport {Select,Input,Button,Alert} from 'antd';\r\n\r\nimport 'antd/dist/antd.css';\r\nconst { Option } = Select;\r\n\r\nclass Massage extends Component {\r\n    constructor (props){\r\n        super(props);\r\n        this.state = {\r\n            myself:{},\r\n            msg:[],\r\n            user: [],\r\n            targetId:{},\r\n            textToSent:'',\r\n            sent:false\r\n        }\r\n        this.onSelectChange = this.onSelectChange.bind(this);\r\n        this.onTextChange = this.onTextChange.bind(this);\r\n        this.onSendClick = this.onSendClick.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(this.props.getUserBy)\r\n        fetch(`${api_host}/api/user/${this.props.getUserBy}`)\r\n            .then((response)=>  {\r\n                return response.json();\r\n            })\r\n            .then((myJson)=> {\r\n                console.log(myJson);\r\n                this.setState({myself:myJson})\r\n                this.setState({msg:myJson['messages']})\r\n            })\r\n        fetch(`${api_host}/api/user`)\r\n            .then((response)=>  {\r\n                return response.json();\r\n            })\r\n            .then((myJson)=> {\r\n                //console.log(myJson);\r\n                const toRole = this.props.toUser\r\n                let filtedUser = [];\r\n                myJson.map(item=>{\r\n                    if(item.role==toRole){\r\n                        filtedUser.push(item)\r\n\r\n                    }\r\n                });\r\n                //console.log(filtedUser);\r\n                this.setState({user:filtedUser})\r\n            });\r\n    }\r\n    onSelectChange(value){\r\n        this.setState({targetId : value})\r\n\r\n    }\r\n    onTextChange(e){\r\n        let {value}=e.target\r\n        this.setState({textToSent : value})\r\n\r\n    }\r\n    onSendClick(e){\r\n        let from = this.state.myself\r\n        let target = this.state.user[this.state.targetId]\r\n        let data = {};\r\n        let msgbody = `${from.name}@${target.name}: ${this.state.textToSent}`\r\n        if(this.props.toUser == \"Salesman\"){\r\n            data={text:msgbody,customer:from,salesman:target};\r\n        }else if(this.props.toUser == \"Customer\"){\r\n            data={text:msgbody,customer:target,salesman:from};\r\n        }\r\n        console.log(data);\r\n        console.log(data);\r\n\r\n        fetch(`${api_host}/api/message`, {\r\n            body: JSON.stringify(data), // must match 'Content-Type' header\r\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n            credentials: 'same-origin', // include, same-origin, *omit\r\n            headers: {\r\n                'user-agent': 'Mozilla/4.0 MDN Example',\r\n                'content-type': 'application/json'\r\n            },\r\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n            mode: 'cors', // no-cors, cors, *same-origin\r\n            redirect: 'follow', // manual, *follow, error\r\n            referrer: 'no-referrer', // *client, no-referrer\r\n        }).then(response => console.log(response.json()))\r\n             // parses response to JSON\r\n        this.setState({sent:true})\r\n        setTimeout(()=>{\r\n            this.setState({\r\n                sent:false\r\n            });},2000);\r\n\r\n    }\r\n\r\n    render() {\r\n        console.log(this.state)\r\n        return (\r\n            <div>\r\n                <h1>Hi {this.state.myself.name} you have message</h1>\r\n\r\n                <ul>\r\n                    {this.state.msg.map(msg => <li key={msg.id}>{msg.text}</li>)}\r\n\r\n                </ul>\r\n                <Select style={{ width: 120 }} onChange={this.onSelectChange}>\r\n                    {this.state.user.map((user,index) => <Option key={index}>{user.name}</Option>)}\r\n                </Select>\r\n                <Input style={{ width: 520 }} placeholder=\"massage\" onChange={this.onTextChange} />\r\n                <Button type=\"primary\" onClick={this.onSendClick}>Send</Button>\r\n                {(() => {\r\n                    if (this.state.sent) {\r\n                        return <Alert message=\"Send Plz refresh\" type=\"success\" />;\r\n                    } else {\r\n                        return <div />;\r\n                    }\r\n                })()}\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Massage;","//export const api_host = 'http://localhost:8080';\r\nexport const api_host = '';","import React, {Component} from 'react';\r\nimport Massage from \"./Massage\";\r\n//'id/18'\r\nclass Customer extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Customer</h1>\r\n                <Massage toUser={'Salesman'} getUserBy={'profile'}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Customer;","import React, {Component} from 'react';\r\nimport Massage from \"./Massage\";\r\nimport {api_host} from \"../const\";\r\n//'id/19'\r\nclass saler extends Component {\r\n    constructor (props){\r\n        super(props);\r\n        this.state = {}\r\n\r\n    }\r\n    componentDidMount(){\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>saler</h1>\r\n                <Massage toUser={'Customer'} getUserBy={'profile'}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default saler;","import React, {Component} from 'react';\r\nimport { Table } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport {api_host} from \"../const\";\r\nclass UserList extends Component {\r\n    constructor (props){\r\n        super(props);\r\n        this.state = {\r\n            data:[]\r\n        }\r\n        this.updateData = this.updateData.bind(this);\r\n    }\r\n    updateData(){\r\n        fetch(`${api_host}/api/user`)\r\n            .then((response)=>  {\r\n                return response.json();\r\n            })\r\n            .then((myJson)=> {\r\n                //console.log(myJson);\r\n\r\n                myJson.map(item => {\r\n                    item['key']=item.id\r\n                });\r\n                this.setState({data: myJson})\r\n            });\r\n    }\r\n    componentDidMount() {\r\n        this.updateData()\r\n    }\r\n    render() {\r\n        const {data}=this.state\r\n        const columns = [\r\n            {\r\n                title: 'id',\r\n                dataIndex: 'id',\r\n                key: 'id',\r\n                render: text => <a>{text}</a>,\r\n            },\r\n            {\r\n                title: 'username',\r\n                dataIndex: 'username',\r\n                key: 'username',\r\n                render: text => <a>{text}</a>,\r\n            },\r\n            {\r\n                title: 'password',\r\n                dataIndex: 'password',\r\n                key: 'password',\r\n                render: text => <a>{text}</a>,\r\n            },\r\n            {\r\n                title: 'name',\r\n                dataIndex: 'name',\r\n                key: 'name',\r\n                render: text => <a>{text}</a>,\r\n            },\r\n            {\r\n                title: 'email',\r\n                dataIndex: 'email',\r\n                key: 'email',\r\n                render: text => <a>{text}</a>,\r\n            },\r\n            {\r\n                title: 'phone',\r\n                dataIndex: 'phone',\r\n                key: 'phone',\r\n                render: text => <a>{text}</a>,\r\n            },\r\n            {\r\n                title: 'role',\r\n                dataIndex: 'role',\r\n                key: 'role',\r\n                render: text => <a>{text}</a>,\r\n            },\r\n        ];\r\n        const rowSelection = {type:'radio'}\r\n        return (\r\n            <div>\r\n                <Table rowSelection={rowSelection} columns={columns} dataSource={data} />\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UserList;","import React, {Component} from 'react';\r\nimport UserList from \"./UserList\";\r\nclass Admin extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>admin</h1>\r\n                <UserList/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Admin;","\r\nimport React, { Component } from 'react'\r\nimport { Route, Switch, withRouter, BrowserRouter } from 'react-router-dom'\r\nimport App from \"./App\";\r\nimport Customer from './pages/customer'\r\nimport saler from './pages/saler'\r\nimport Admin from \"./pages/admin\";\r\nclass Router extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <BrowserRouter>\r\n                <Switch>\r\n                    <Route exact path=\"/\" component={withRouter(App)} />\r\n                    <Route exact path=\"/customer\" component={withRouter(Customer)} />\r\n                    <Route exact path=\"/saler\" component={withRouter(saler)} />\r\n                    <Route exact path=\"/admin\" component={withRouter(Admin)} />\r\n                </Switch>\r\n            </BrowserRouter>\r\n        )\r\n    }\r\n}\r\nexport default Router","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Router from \"./router\";\n\nReactDOM.render(\n\n\n      <Router/>\n  ,\n\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}