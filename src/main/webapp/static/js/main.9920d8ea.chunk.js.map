{"version":3,"sources":["App.js","serviceWorker.js","pages/Massage.js","const.js","pages/CarInfomation.js","pages/modalbysaler.js","pages/customer.js","pages/userUpdateFrom.js","pages/SalerCarList.js","pages/saler.js","pages/UserFrom.js","pages/UserList.js","pages/CreateMakerLodeModel.js","pages/admin.js","router.js","index.js"],"names":["App","className","role","href","Component","Boolean","window","location","hostname","match","Option","Select","Massage","props","state","myself","msg","user","targetId","textToSent","sent","onSelectChange","bind","onTextChange","onSendClick","console","log","this","getUserBy","fetch","then","response","json","myJson","setState","toRole","toUser","filtedUser","map","item","push","value","e","target","from","data","msgbody","name","text","customer","salesman","body","JSON","stringify","cache","credentials","headers","method","mode","redirect","referrer","setTimeout","key","id","style","width","onChange","index","placeholder","type","onClick","message","CarInfomation","CarModel","DataSource","SelectedItem","ItemSelected","ds","option","dataSource","onSelect","Item","label","color","vin","Modalbysaler","saler","carModels","md","span","Customer","updateFrom","handleSubmit","preventDefault","form","validateFields","err","values","sId","postData","updateList","fieldsError","getFieldDecorator","getFieldsError","getFieldError","isFieldTouched","usernameError","passwordError","emailError","phoneError","nameError","layout","onSubmit","rules","required","initialValue","validateStatus","help","prefix","htmlType","disabled","Object","keys","some","field","userUpdateFrom","Form","create","SalerCarList","modellist","selectIdx","loadself","forSaler","From","userFrom","UserList","onSelectedRowKeysChange","selectedRowKeys","updateData","onDeleteClick","columns","title","dataIndex","render","rowSelection","UserFrom","CreateMakerLodeModel","showTable","maker","Country","CarModelList","onFatchClicked","onCloseClicked","onMakerchenged","onContrychenged","LodeModel","PostMakeModel","list","cml","ret","year","VIN","md5","Admin","Router","exact","path","component","withRouter","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.9920d8ea.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport { Link } from 'react-router-dom'\nimport './App.css';\n\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <h1>buyCar</h1>\n                <h2>Select your role</h2>\n                <h3>if you didn't login it will jump to login after your choice then back this page</h3>\n                <ul role=\"nav\">\n                    <li><a href=\"/customer\">customer</a></li>\n                    <li><a href=\"/saler\">salerman</a></li>\n                    <li><a href=\"/admin\">admin</a></li>\n                </ul>\n                <h2><a href=\"/logout\">logout</a></h2>\n                <h2>Or create new account</h2>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {Component} from 'react';\r\nimport {api_host} from '../const';\r\nimport {Select,Input,Button,Alert} from 'antd';\r\n\r\nimport 'antd/dist/antd.css';\r\nconst { Option } = Select;\r\n\r\nclass Massage extends Component {\r\n    constructor (props){\r\n        super(props);\r\n        this.state = {\r\n            myself:{},\r\n            msg:[],\r\n            user: [],\r\n            targetId:{},\r\n            textToSent:'',\r\n            sent:false\r\n        }\r\n        this.onSelectChange = this.onSelectChange.bind(this);\r\n        this.onTextChange = this.onTextChange.bind(this);\r\n        this.onSendClick = this.onSendClick.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(this.props.getUserBy)\r\n        fetch(`${api_host}/api/user/${this.props.getUserBy}`)\r\n            .then((response)=>  {\r\n                return response.json();\r\n            })\r\n            .then((myJson)=> {\r\n                console.log(myJson);\r\n                this.setState({myself:myJson})\r\n                this.setState({msg:myJson['messages']})\r\n            })\r\n        fetch(`${api_host}/api/user`)\r\n            .then((response)=>  {\r\n                return response.json();\r\n            })\r\n            .then((myJson)=> {\r\n                //console.log(myJson);\r\n                const toRole = this.props.toUser\r\n                let filtedUser = [];\r\n                myJson.map(item=>{\r\n                    if(item.role==toRole){\r\n                        filtedUser.push(item)\r\n\r\n                    }\r\n                });\r\n                //console.log(filtedUser);\r\n                this.setState({user:filtedUser})\r\n            });\r\n    }\r\n    onSelectChange(value){\r\n        this.setState({targetId : value})\r\n\r\n    }\r\n    onTextChange(e){\r\n        let {value}=e.target\r\n        this.setState({textToSent : value})\r\n\r\n    }\r\n    onSendClick(e){\r\n        let from = this.state.myself\r\n        let target = this.state.user[this.state.targetId]\r\n        let data = {};\r\n        let msgbody = `${from.name}@${target.name}: ${this.state.textToSent}`\r\n        if(this.props.toUser == \"Salesman\"){\r\n            data={text:msgbody,customer:from,salesman:target};\r\n        }else if(this.props.toUser == \"Customer\"){\r\n            data={text:msgbody,customer:target,salesman:from};\r\n        }\r\n        console.log(data);\r\n        console.log(data);\r\n\r\n        fetch(`${api_host}/api/message`, {\r\n            body: JSON.stringify(data), // must match 'Content-Type' header\r\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n            credentials: 'same-origin', // include, same-origin, *omit\r\n            headers: {\r\n                'user-agent': 'Mozilla/4.0 MDN Example',\r\n                'content-type': 'application/json'\r\n            },\r\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n            mode: 'cors', // no-cors, cors, *same-origin\r\n            redirect: 'follow', // manual, *follow, error\r\n            referrer: 'no-referrer', // *client, no-referrer\r\n        }).then(response => console.log(response.json()))\r\n             // parses response to JSON\r\n        this.setState({sent:true})\r\n        setTimeout(()=>{\r\n            this.setState({\r\n                sent:false\r\n            });},2000);\r\n\r\n    }\r\n\r\n    render() {\r\n        console.log(this.state)\r\n        return (\r\n            <div>\r\n                <h1>Hi {this.state.myself.name} you have message</h1>\r\n\r\n                <ul>\r\n                    {this.state.msg.map(msg => <li key={msg.id}>{msg.text}</li>)}\r\n\r\n                </ul>\r\n                <Select style={{ width: 120 }} onChange={this.onSelectChange}>\r\n                    {this.state.user.map((user,index) => <Option key={index}>{user.name}</Option>)}\r\n                </Select>\r\n                <Input style={{ width: 520 }} placeholder=\"massage\" onChange={this.onTextChange} />\r\n                <Button type=\"primary\" onClick={this.onSendClick}>Send</Button>\r\n                {(() => {\r\n                    if (this.state.sent) {\r\n                        return <Alert message=\"Send Plz refresh\" type=\"success\" />;\r\n                    } else {\r\n                        return <div />;\r\n                    }\r\n                })()}\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Massage;","//export const api_host = 'http://localhost:8080';\r\nexport const api_host = '';","import React, {Component} from 'react';\r\nimport {Row,Button, Col,AutoComplete,Descriptions} from 'antd'\r\nimport {api_host} from \"../const\";\r\nclass CarInfomation extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            CarModel:[],\r\n            DataSource:[],\r\n            SelectedItem:{}\r\n        }\r\n        this.ItemSelected=this.ItemSelected.bind(this)\r\n    }\r\n    componentDidMount() {\r\n        let ds =[]\r\n        fetch(`${api_host}/api/carmodel`)\r\n            .then((response)=>  {\r\n                return response.json();\r\n            })\r\n            .then(myJson=> {\r\n                this.setState({CarModel:myJson})\r\n\r\n                console.log(myJson);\r\n                myJson.map(item => {\r\n                    ds.push(item['name'])\r\n                })\r\n\r\n            }).then(()=>this.setState({DataSource:ds}));;\r\n\r\n\r\n    }\r\n    ItemSelected(value, option){\r\n\r\n        this.state.CarModel.map(item=>{\r\n            if(item['name']===value){\r\n                console.log(item);\r\n                this.setState({SelectedItem:item})\r\n            }\r\n        })\r\n\r\n    }\r\n    render() {\r\n        const {SelectedItem}=this.state\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    <Col>\r\n                        <AutoComplete dataSource={this.state.DataSource} onSelect={this.ItemSelected}/>\r\n                    </Col>\r\n                    <Col>\r\n                        <Descriptions>\r\n                            <Descriptions.Item label=\"Name\">{SelectedItem.name}</Descriptions.Item>\r\n                            <Descriptions.Item label=\"Color\">{SelectedItem.color}</Descriptions.Item>\r\n                            <Descriptions.Item label=\"VIN\">{SelectedItem.vin}</Descriptions.Item>\r\n                            <Descriptions.Item label=\"Type\">{SelectedItem.type}</Descriptions.Item>\r\n                        </Descriptions>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CarInfomation;","import React, {Component} from 'react';\r\nimport {api_host} from \"../const\";\r\nimport {Row,Col}from 'antd'\r\nclass Modalbysaler extends Component {\r\n    constructor (props){\r\n        super(props);\r\n        this.state = {\r\n            saler:[]\r\n        }\r\n\r\n    }\r\n    componentDidMount() {\r\n        let ret =[]\r\n        fetch(`${api_host}/api/salesman`)\r\n            .then((response)=>  {\r\n                return response.json();\r\n            })\r\n            .then(myJson=> {\r\n                console.log('myJson',myJson);\r\n                this.setState({saler:myJson})\r\n                /*\r\n                myJson['carModels'].map(item => {\r\n                    //console.log(item);\r\n                });*/\r\n                //this.setState({modellist: myJson['carModels']})\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const {saler}=this.state\r\n        return (\r\n            <div>\r\n                {saler.map(saler=><div key={saler.id}><h1>{saler.name}</h1>{saler.carModels.map(md=><Row><Col span={2}>{md.name}</Col><Col span={2}>{md.type}</Col><Col span={2}>{md.color}</Col></Row>)}</div>)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Modalbysaler;","import React, {Component} from 'react';\r\nimport Massage from \"./Massage\";\r\nimport CarInfomation from \"./CarInfomation\";\r\nimport Modalbysaler from './modalbysaler'\r\n//'id/18'\r\nclass Customer extends Component {\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Customer</h1>\r\n                <Massage toUser={'Salesman'} getUserBy={'profile'}/>\r\n                <h1>Search car</h1>\r\n                <CarInfomation/>\r\n                <h1>Saler list</h1>\r\n                <Modalbysaler/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Customer;","import React, {Component} from 'react';\r\nimport { Form, Icon, Input, Button,Select } from 'antd';\r\nimport {api_host} from \"../const\";\r\nimport 'antd/dist/antd.css';\r\nconst { Option } = Select;\r\nfunction hasErrors(fieldsError) {\r\n    return Object.keys(fieldsError).some(field => fieldsError[field]);\r\n}\r\nclass updateFrom extends Component {\r\n    componentDidMount() {\r\n        // To disable submit button at the beginning.\r\n        this.props.form.validateFields();\r\n    }\r\n    postData(data){\r\n        fetch(`${api_host}/api/user/${this.props.sId[0]}`, {\r\n            body: JSON.stringify(data), // must match 'Content-Type' header\r\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n            credentials: 'same-origin', // include, same-origin, *omit\r\n            headers: {\r\n                'user-agent': 'Mozilla/4.0 MDN Example',\r\n                'content-type': 'application/json'\r\n            },\r\n            method: 'PUT', // *GET, POST, PUT, DELETE, etc.\r\n            mode: 'cors', // no-cors, cors, *same-origin\r\n            redirect: 'follow', // manual, *follow, error\r\n            referrer: 'no-referrer', // *client, no-referrer\r\n        }).then(response => {\r\n            console.log(response.json())\r\n            this.props.updateList()\r\n        })\r\n    }\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                let body = values\r\n                body['id']=this.props.sId[0]\r\n                console.log('Received values of form: ', body);\r\n                this.postData(values);\r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const {getFieldDecorator, getFieldsError, getFieldError, isFieldTouched} = this.props.form;\r\n\r\n        // Only show error after a field is touched.\r\n        const usernameError = isFieldTouched('username') && getFieldError('username');\r\n        const passwordError = isFieldTouched('password') && getFieldError('password');\r\n        const emailError = isFieldTouched('email') && getFieldError('email');\r\n        const phoneError = isFieldTouched('phone') && getFieldError('phone');\r\n        const nameError = isFieldTouched('name') && getFieldError('name');\r\n        return (\r\n            <Form layout=\"inline\" onSubmit={this.handleSubmit}>\r\n                <Form.Item >\r\n                    {getFieldDecorator('role', {\r\n                        rules: [{required: true, message: 'Please select role!'}],initialValue : 'Salesman',\r\n                    })(\r\n                        <Select style={{ width: 120 }} >\r\n                            <Option value=\"Salesman\">Salesman</Option>\r\n                            <Option value=\"Customer\">Customer</Option>\r\n                        </Select>,\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item validateStatus={usernameError ? 'error' : ''} help={usernameError || ''}>\r\n                    {getFieldDecorator('username', {\r\n                        rules: [{required: true, message: 'Please input your username!'}],\r\n                    })(\r\n                        <Input\r\n                            prefix={<Icon type=\"user\" style={{color: 'rgba(0,0,0,.25)'}}/>}\r\n                            placeholder=\"Username\"\r\n                        />,\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item validateStatus={passwordError ? 'error' : ''} help={passwordError || ''}>\r\n                    {getFieldDecorator('password', {\r\n                        rules: [{required: true, message: 'Please input your Password!'}],\r\n                    })(\r\n                        <Input\r\n                            prefix={<Icon type=\"lock\" style={{color: 'rgba(0,0,0,.25)'}}/>}\r\n                            type=\"password\"\r\n                            placeholder=\"Password\"\r\n                        />,\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item validateStatus={emailError ? 'error' : ''} help={emailError || ''}>\r\n                    {getFieldDecorator('email', {\r\n                        rules: [{required: true, message: 'Please input your email!'}],\r\n                    })(\r\n                        <Input\r\n                            placeholder=\"email\"\r\n                        />,\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item validateStatus={phoneError ? 'error' : ''} help={phoneError || ''}>\r\n                    {getFieldDecorator('phone', {\r\n                        rules: [{required: true, message: 'Please input your phone!'}],\r\n                    })(\r\n                        <Input\r\n                            placeholder=\"phone\"\r\n                        />,\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item validateStatus={nameError ? 'error' : ''} help={nameError || ''}>\r\n                    {getFieldDecorator('name', {\r\n                        rules: [{required: true, message: 'Please input your name!'}],\r\n                    })(\r\n                        <Input\r\n                            placeholder=\"name\"\r\n                        />,\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\" disabled={hasErrors(getFieldsError())}>\r\n                        Update\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        )\r\n    }\r\n}\r\nconst userUpdateFrom = Form.create({ name: 'horizontal_login' })(updateFrom);\r\nexport default userUpdateFrom;","import React, {Component} from 'react';\r\nimport {api_host} from \"../const\";\r\nimport {Col, Row, Table} from \"antd\";\r\nimport UserUpdateFrom from \"./userUpdateFrom\";\r\nimport Button from \"antd/es/button\";\r\n\r\nclass SalerCarList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            saler:{},\r\n            modellist:[],\r\n            selectIdx:0,\r\n        }\r\n        this.loadself=this.loadself.bind(this)\r\n    }\r\n    componentDidMount() {\r\n        const api_self= '/api/user/profile'\r\n        const fake_self='/api/salesman/id/19'\r\n        fetch(`${api_host}${api_self}`)\r\n            .then((response)=>  {\r\n                return response.json();\r\n            })\r\n            .then(myJson=> {\r\n                console.log('myJson',myJson['carModels']);\r\n\r\n                this.setState({saler:myJson})\r\n                this.setState({modellist:myJson['carModels']})\r\n            });\r\n    }\r\n\r\n\r\n    loadself(){\r\n\r\n    }\r\n\r\n    render() {\r\n        const {saler,modellist}=this.state\r\n        console.log('saler',saler)\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <h1>{saler.name}</h1>{modellist.map(md=><Row><Col span={2}>{md.name}</Col><Col span={2}>{md.type}</Col><Col span={2}>{md.color}</Col></Row>)}\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SalerCarList;","import React, {Component} from 'react';\r\nimport Massage from \"./Massage\";\r\nimport {api_host} from \"../const\";\r\nimport SalerCarList from \"./SalerCarList\";\r\n//'id/19'\r\nclass saler extends Component {\r\n    constructor (props){\r\n        super(props);\r\n        this.state = {}\r\n\r\n    }\r\n    componentDidMount(){\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>saler</h1>\r\n                <Massage toUser={'Customer'} getUserBy={'profile'}/>\r\n                <SalerCarList forSaler={false}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default saler;","import React, {Component} from 'react';\r\nimport { Form, Icon, Input, Button,Select } from 'antd';\r\nimport {api_host} from \"../const\";\r\nimport 'antd/dist/antd.css';\r\nconst { Option } = Select;\r\nfunction hasErrors(fieldsError) {\r\n    return Object.keys(fieldsError).some(field => fieldsError[field]);\r\n}\r\nclass From extends Component {\r\n    componentDidMount() {\r\n        // To disable submit button at the beginning.\r\n        this.props.form.validateFields();\r\n    }\r\n    postData(data){\r\n        fetch(`${api_host}/api/user`, {\r\n            body: JSON.stringify(data), // must match 'Content-Type' header\r\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n            credentials: 'same-origin', // include, same-origin, *omit\r\n            headers: {\r\n                'user-agent': 'Mozilla/4.0 MDN Example',\r\n                'content-type': 'application/json'\r\n            },\r\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n            mode: 'cors', // no-cors, cors, *same-origin\r\n            redirect: 'follow', // manual, *follow, error\r\n            referrer: 'no-referrer', // *client, no-referrer\r\n        }).then(()=>this.props.updateList())\r\n    }\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                this.postData(values);\r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const {getFieldDecorator, getFieldsError, getFieldError, isFieldTouched} = this.props.form;\r\n\r\n        // Only show error after a field is touched.\r\n        const usernameError = isFieldTouched('username') && getFieldError('username');\r\n        const passwordError = isFieldTouched('password') && getFieldError('password');\r\n        const emailError = isFieldTouched('email') && getFieldError('email');\r\n        const phoneError = isFieldTouched('phone') && getFieldError('phone');\r\n        const nameError = isFieldTouched('name') && getFieldError('name');\r\n        return (\r\n            <Form layout=\"inline\" onSubmit={this.handleSubmit}>\r\n                <Form.Item >\r\n                    {getFieldDecorator('role', {\r\n                        rules: [{required: true, message: 'Please select role!'}],initialValue : 'Salesman',\r\n                    })(\r\n                        <Select style={{ width: 120 }} >\r\n                            <Option value=\"Salesman\">Salesman</Option>\r\n                            <Option value=\"Customer\">Customer</Option>\r\n                        </Select>,\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item validateStatus={usernameError ? 'error' : ''} help={usernameError || ''}>\r\n                    {getFieldDecorator('username', {\r\n                        rules: [{required: true, message: 'Please input your username!'}],\r\n                    })(\r\n                        <Input\r\n                            prefix={<Icon type=\"user\" style={{color: 'rgba(0,0,0,.25)'}}/>}\r\n                            placeholder=\"Username\"\r\n                        />,\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item validateStatus={passwordError ? 'error' : ''} help={passwordError || ''}>\r\n                    {getFieldDecorator('password', {\r\n                        rules: [{required: true, message: 'Please input your Password!'}],\r\n                    })(\r\n                        <Input\r\n                            prefix={<Icon type=\"lock\" style={{color: 'rgba(0,0,0,.25)'}}/>}\r\n                            type=\"password\"\r\n                            placeholder=\"Password\"\r\n                        />,\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item validateStatus={emailError ? 'error' : ''} help={emailError || ''}>\r\n                    {getFieldDecorator('email', {\r\n                        rules: [{required: true, message: 'Please input your email!'}],\r\n                    })(\r\n                        <Input\r\n                            placeholder=\"email\"\r\n                        />,\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item validateStatus={phoneError ? 'error' : ''} help={phoneError || ''}>\r\n                    {getFieldDecorator('phone', {\r\n                        rules: [{required: true, message: 'Please input your phone!'}],\r\n                    })(\r\n                        <Input\r\n                            placeholder=\"phone\"\r\n                        />,\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item validateStatus={nameError ? 'error' : ''} help={nameError || ''}>\r\n                    {getFieldDecorator('name', {\r\n                        rules: [{required: true, message: 'Please input your name!'}],\r\n                    })(\r\n                        <Input\r\n                            placeholder=\"name\"\r\n                        />,\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\" disabled={hasErrors(getFieldsError())}>\r\n                        Create\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        )\r\n    }\r\n}\r\nconst userFrom = Form.create({ name: 'horizontal_login' })(From);\r\nexport default userFrom;","import React, {Component} from 'react';\r\nimport { Table,Row, Col } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport {api_host} from \"../const\";\r\nimport Button from \"antd/es/button\";\r\nimport UserUpdateFrom from \"./userUpdateFrom\";\r\nimport UserFrom from \"./UserFrom\";\r\nclass UserList extends Component {\r\n    constructor (props){\r\n        super(props);\r\n        this.state = {\r\n            data:[],\r\n            selectedRowKeys:[]\r\n        }\r\n        this.updateData = this.updateData.bind(this);\r\n        this.onDeleteClick = this.onDeleteClick.bind(this);\r\n    }\r\n    updateData(){\r\n        fetch(`${api_host}/api/user`)\r\n            .then((response)=>  {\r\n                return response.json();\r\n            })\r\n            .then(myJson=> {\r\n                console.log(myJson);\r\n                myJson.map(item => {\r\n                    item['key']=item.id\r\n                });\r\n                this.setState({data: myJson})\r\n            });\r\n\r\n    }\r\n    onSelectedRowKeysChange = (selectedRowKeys) => {\r\n        this.setState({ selectedRowKeys });\r\n\r\n    }\r\n    componentDidMount() {\r\n        this.updateData()\r\n\r\n    }\r\n\r\n    onDeleteClick(e){\r\n        console.log(this.state.selectedRowKeys);\r\n        fetch(`${api_host}/api/user/${this.state.selectedRowKeys[0]}`, {\r\n            body: '', // must match 'Content-Type' header\r\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n            credentials: 'same-origin', // include, same-origin, *omit\r\n            headers: {\r\n                'user-agent': 'Mozilla/4.0 MDN Example',\r\n                'content-type': 'application/json'\r\n            },\r\n            method: 'DELETE', // *GET, POST, PUT, DELETE, etc.\r\n            mode: 'cors', // no-cors, cors, *same-origin\r\n            redirect: 'follow', // manual, *follow, error\r\n            referrer: 'no-referrer', // *client, no-referrer\r\n        }).then(()=>{this.updateData()});\r\n    }\r\n    render() {\r\n\r\n        const {data}=this.state\r\n        const columns = [\r\n            {\r\n                title: 'id',\r\n                dataIndex: 'id',\r\n                key: 'id',\r\n                render: text => <a>{text}</a>,\r\n            },\r\n            {\r\n                title: 'username',\r\n                dataIndex: 'username',\r\n                key: 'username',\r\n                render: text => <a>{text}</a>,\r\n            },\r\n            {\r\n                title: 'password',\r\n                dataIndex: 'password',\r\n                key: 'password',\r\n                render: text => <a>{text}</a>,\r\n            },\r\n            {\r\n                title: 'name',\r\n                dataIndex: 'name',\r\n                key: 'name',\r\n                render: text => <a>{text}</a>,\r\n            },\r\n            {\r\n                title: 'email',\r\n                dataIndex: 'email',\r\n                key: 'email',\r\n                render: text => <a>{text}</a>,\r\n            },\r\n            {\r\n                title: 'phone',\r\n                dataIndex: 'phone',\r\n                key: 'phone',\r\n                render: text => <a>{text}</a>,\r\n            },\r\n            {\r\n                title: 'role',\r\n                dataIndex: 'role',\r\n                key: 'role',\r\n                render: text => <a>{text}</a>,\r\n            },\r\n        ];\r\n        const rowSelection = {type:'radio',onChange: this.onSelectedRowKeysChange,}\r\n        return (\r\n            <div>\r\n                <Table rowSelection={rowSelection} columns={columns} dataSource={data} />\r\n                <h2>Update/Delete</h2>\r\n                <Row>\r\n                    <Col span={16}><UserUpdateFrom  sId = {this.state.selectedRowKeys} updateList = {this.updateData}/></Col>\r\n                    <Col span={3}><Button type=\"danger\" onClick={this.onDeleteClick}>Delete</Button></Col>\r\n                </Row>\r\n                <h2>create</h2>\r\n                <UserFrom updateList = {this.updateData}/>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UserList;","import React, {Component} from 'react';\r\nimport {Input, Row, Col, Divider, Button, Table} from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport md5 from 'js-md5';\r\nimport {api_host} from \"../const\";\r\nclass CreateMakerLodeModel extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showTable:false,\r\n            maker:'',\r\n            Country:'',\r\n            CarModelList:[]\r\n        }\r\n        this.onFatchClicked=this.onFatchClicked.bind(this)\r\n        this.onCloseClicked=this.onCloseClicked.bind(this)\r\n        this.onMakerchenged=this.onMakerchenged.bind(this)\r\n        this.onContrychenged=this.onContrychenged.bind(this)\r\n        this.LodeModel=this.LodeModel.bind(this)\r\n        this.PostMakeModel=this.PostMakeModel.bind(this)\r\n    }\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    PostMakeModel(list){\r\n        fetch(`${api_host}/api/maker/${this.state.maker}/${this.state.Country}/importall`, {\r\n            body: JSON.stringify(list), // must match 'Content-Type' header\r\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n            credentials: 'same-origin', // include, same-origin, *omit\r\n            headers: {\r\n                'user-agent': 'Mozilla/4.0 MDN Example',\r\n                'content-type': 'application/json'\r\n            },\r\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n            mode: 'cors', // no-cors, cors, *same-origin\r\n            redirect: 'follow', // manual, *follow, error\r\n            referrer: 'no-referrer', // *client, no-referrer\r\n        }).then(response => console.log(response.json()))\r\n    }\r\n\r\n    LodeModel(maker){\r\n        console.log(maker)\r\n        fetch(`https://vpic.nhtsa.dot.gov/api/vehicles/getmodelsformake/${maker}?format=json`)\r\n            .then((response)=>  {\r\n                console.log(response)\r\n                return response.json();\r\n            }).then((myJson)=> {\r\n                let cml = []\r\n\r\n                let ret =myJson['Results']\r\n                console.log(ret);\r\n                ret.map(item=>{\r\n                    cml.push({name:item['Model_Name'],year:2020,color:'white',VIN:md5(item['Model_Name']),type:'Sadam'})\r\n                });\r\n                this.setState({CarModelList:cml})\r\n                 //console.log(this.state)\r\n                //console.log(filtedUser);\r\n\r\n            }).then(()=>{\r\n                console.log(this.state.Country)\r\n                //let mker = {name:this.state.maker,country:this.state.Country,carModels:}\r\n                //console.log(mker)\r\n                this.PostMakeModel(this.state.CarModelList);\r\n            })\r\n\r\n    }\r\n    onFatchClicked(){\r\n\r\n\r\n        this.LodeModel(this.state.maker)\r\n\r\n\r\n    }\r\n    onCloseClicked(){\r\n\r\n        this.setState({showTable:false})\r\n    }\r\n    onMakerchenged(e){\r\n        let {value}=e.target\r\n        this.setState({maker:value})\r\n    }\r\n    onContrychenged(e){\r\n        let {value}=e.target\r\n        this.setState({Country:value})\r\n\r\n    }\r\n    render() {\r\n        const columns = [\r\n            {\r\n                title: 'name',\r\n                dataIndex: 'name',\r\n                key: 'name',\r\n                render: text => <a>{text}</a>,\r\n            },\r\n            {\r\n                title: 'year',\r\n                dataIndex: 'year',\r\n                key: 'year',\r\n                render: text => <a>{text}</a>,\r\n            },\r\n            {\r\n                title: 'color',\r\n                dataIndex: 'color',\r\n                key: 'color',\r\n                render: text => <a>{text}</a>,\r\n            },\r\n            {\r\n                title: 'VIN',\r\n                dataIndex: 'VIN',\r\n                key: 'VIN',\r\n                render: text => <a>{text}</a>,\r\n            },\r\n            {\r\n                title: 'type',\r\n                dataIndex: 'type',\r\n                key: 'type',\r\n                render: text => <a>{text}</a>,\r\n            },\r\n        ]\r\n        return (\r\n            <div>\r\n                <Divider type=\"vertical\" />\r\n                <Row>\r\n                    <h1>Create Maker and Load Model</h1>\r\n                </Row>\r\n                <Row>\r\n                    <Col span={1}>\r\n                        <h3> Maker:</h3>\r\n                    </Col>\r\n                    <Col span={2}>\r\n                        <Input placeholder=\"maker name\" onChange={this.onMakerchenged}/>\r\n                    </Col>\r\n                    <Col span={1}>\r\n                        <h3> Country:</h3>\r\n                    </Col>\r\n                    <Col span={2}>\r\n                        <Input placeholder=\"Country\" onChange={this.onContrychenged}/>\r\n                    </Col>\r\n\r\n                    <Col span={1}>\r\n                        <Button type=\"primary\" onClick={this.onFatchClicked}>fetch</Button>\r\n                    </Col>\r\n                    <Col span={this.state.showTable?2:0}>\r\n                        <Button type=\"danger\" onClick={this.onCloseClicked}>close table</Button>\r\n                    </Col>\r\n\r\n\r\n\r\n                </Row>\r\n            <Row>\r\n                <Col span={this.state.showTable?24:0}>\r\n                    <Table columns={columns} dataSource={this.state.CarModelList}/>\r\n                </Col>\r\n            </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CreateMakerLodeModel;","import React, {Component} from 'react';\r\nimport UserList from \"./UserList\";\r\nimport UserFrom from \"./UserFrom\";\r\nimport CreateMakerLodeModel from \"./CreateMakerLodeModel\";\r\nclass Admin extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>admin</h1>\r\n                <UserList/>\r\n                <CreateMakerLodeModel/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Admin;","\r\nimport React, { Component } from 'react'\r\nimport { Route, Switch, withRouter, BrowserRouter } from 'react-router-dom'\r\nimport App from \"./App\";\r\nimport Customer from './pages/customer'\r\nimport saler from './pages/saler'\r\nimport Admin from \"./pages/admin\";\r\nclass Router extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <BrowserRouter>\r\n                <Switch>\r\n                    <Route exact path=\"/\" component={withRouter(App)} />\r\n                    <Route exact path=\"/customer\" component={withRouter(Customer)} />\r\n                    <Route exact path=\"/saler\" component={withRouter(saler)} />\r\n                    <Route exact path=\"/admin\" component={withRouter(Admin)} />\r\n                </Switch>\r\n            </BrowserRouter>\r\n        )\r\n    }\r\n}\r\nexport default Router","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Router from \"./router\";\n\nReactDOM.render(\n\n\n      <Router/>\n  ,\n\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}